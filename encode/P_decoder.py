#!/usr/bin/env python3
import argparse
import os
import zlib

VERBOSE=0

def getSerializedFile(infile):
	header=infile.read(32)
	body=bytearray(infile.read())
	magicByte=getMagic(header)>>12
	if VERBOSE:
		print(magicByte)
	return zlib.decompress(decrypt(body,len(body),magicByte))

knownOperators={
				0x01:'function ',
				0x02:'nested ',
				0x03:'if ',
				0x04:'switch ',
				0x05:'try ',
				0x06:'while ',
				0x07:'for ',
				0x08:'end',
				0x09:'else ',
				0x0A:'elseif ',
				0x0B:'break',
				0x0C:'return ',
				0x0D:'parfor ',
				0x0F:'global ',
				0x10:'persistent ',
				0x14:'catch ',
				0x15:'continue ',
				0x16:'case ',
				0x17:'otherwise ',
				0x19:'classdef ',
				0x1C:'properties ',
				0x1E:'methods ',
				0x1F:'events ',
				0x20:'enumeration ',
				0x21:'spmd ',
				0x22:'parsection ',
				0x23:'section ',
				40:'id ',
				41:'eend ',
				42:'int ',
				43:'float ',
				44:'string ',
				45:'dual ',
				46:'!',#bang?
				47:'QUEST',
				0x32:';',
				0x33:',',
				0x34:'(',
				0x35:')',
				0x36:'[',
				0x37:']',
				0x38:'{',
				0x39:'}',
				58:'FEEND',
				0x3C:'\'',
				0x3D:'.\'',
				0x3E:'~',
				0x3F:'@',
				0x40:'$',
				65:'`',
				66:'``',
				0x46:'+',
				0x47:'-',
				0x48:'*',
				0x49:'/',
				0x4A:'\\',
				0x4B:'^',
				0x4C:':',
				0x50:'.',
				0x51:'.*',
				0x52:'./',
				0x53:'.\\',
				0x54:'.^',
				0x55:'&',
				0x56:'|',
				0x57:'&&',
				0x58:'||',
				0x59:'<',
				0x5A:'>',
				0x5B:'<=',
				0x5C:'>=',
				0x5D:'==',
				0x5E:'~=',
				0x5F:'=',
				96:'CNE',
				97:'ARROW',
				0x64:'\n',#EOL
				101:'\n',#SEOL
				102:'\n',#CEOL
				103:'\n',#IEOL
				105:'%',
				106:'%{',
				107:'BLKCOM',
				108:'%}',
				109:'CPAD',
				110:'PRAGMA',
				0x6F:'...',#DOTDOTDOT
				0x70:'..',#DOTDOT
				113:'DEEP_NEST',
				114:'DEEP_STMT',
				116:'WHITE',
				118:'NEGERR',
				119:'SEMERR',
				120:'EOLERR',
				121:'UNTERM',
				122:'BADCHAR',
				123:'DEEP_PAREN',
				124:'FP_ERR',
				125:'RES_ERR',
				126:'DEEP_COM',
				127:'BEGIN_TYPE',
				128:'END_TYPE',
				129:'STRING_LITERAL',
				130:'UNTERM_STRING_LITERAL',
				131:'LAST_TOKEN',
				}

lookUpTable=[0x87,0x06,0x0F,0x05,0xB0,0x3A,0xF6,0xC3,0x9C,0x2A,0x02,0x2E,0x8C,0xAA,0x6D,0x03,0xE2,0x8A,0xED,0x32,0x76,0x18,0x57,0xF5,0xF3,0xE7,0x6F,0xC6,0xC0,0xD7,0xF0,0x6C,0x59,0xBA,0x08,0xBE,0xBE,0x32,0xBB,0x0C,0xF9,0x76,0x1E,0x2E,0x29,0x50,0x09,0x5B,0x53,0x37,0xB8,0xD7,0xEA,0xC2,0x49,0xB9,0x01,0x71,0x2B,0x00,0x59,0x6F,0xBF,0x10,0x64,0x55,0x56,0x5A,0x72,0xF6,0x31,0xCF,0x69,0x48,0xB6,0x49,0x91,0xAE,0xB5,0x30,0x72,0x4C,0xD8,0x33,0x7D,0xB8,0xB5,0xE4,0xD8,0x0B,0xEF,0x97,0x99,0x39,0xA5,0x58,0x11,0x42,0xD5,0xA2,0xF3,0x16,0x0D,0x04,0xAB,0xF2,0xD0,0x8E,0x92,0x36,0x12,0xA1,0xFD,0x41,0xAD,0x7C,0xE5,0x2E,0xFD,0x47,0x75,0x66,0xB5,0xD5,0x84,0x48,0xBC,0x01,0x95,0x69,0xF3,0x8B,0x11,0x91,0xB7,0x83,0x11,0xF3,0x29,0x85,0x77,0xF4,0xE0,0x3E,0x87,0xA9,0x0E,0x79,0x04,0xDB,0x99,0x4B,0x37,0xCC,0xD1,0x2B,0xE1,0x63,0x17,0x37,0xC3,0x0D,0x55,0x58,0x30,0x43,0xF0,0xD9,0x0A,0xB4,0x20,0x12,0x16,0x45,0x0D,0xB0,0x1B,0x06,0x3A,0x13,0x0C,0x25,0x4C,0x92,0x70,0xB4,0xCC,0x40,0x7F,0x5B,0x90,0x6D,0x7E,0x1B,0x7E,0x61,0xD9,0xFC,0x82,0x0A,0x11,0x0A,0x46,0x1E,0xF0,0x67,0x56,0x15,0x57,0xB5,0x38,0x6F,0xE9,0x15,0x35,0x36,0x89,0xA1,0xFB,0x6D,0x68,0xF7,0x0D,0x92,0xDD,0x2C,0x42,0x3A,0x35,0x94,0xCC,0x7C,0xFB,0x2D,0x20,0xB3,0xDA,0x6E,0xEF,0x36,0x1A,0xC3,0xC9,0x44,0x70,0x94,0xD5,0x08,0x5E,0xB7,0xAB,0xB8,0xAF,0x2C,0xBD,0x50,0x82,0x25,0x8D,0x8C,0x6F,0xAA,0xD5,0x3D,0x26,0x21,0x9E,0x0F,0x09,0xCF,0x9B,0x05,0x74,0x85,0x6F,0x09,0x5D,0xED,0x6F,0x3B,0xEA,0x32,0xB3,0x3C,0x37,0x93,0xC4,0x61,0x8D,0x30,0x60,0x95,0xF5,0xE6,0xD3,0x4E,0x4D,0xD8,0xD1,0x91,0xA8,0x36,0x9A,0xA8,0x01,0x0C,0x20,0xE1,0xBD,0x8C,0x9E,0xD2,0x28,0x92,0x2A,0x16,0x7F,0x27,0x9E,0x42,0x97,0x89,0x21,0x5D,0x39,0x9C,0x70,0x34,0x70,0x8F,0xF4,0x57,0xEE,0x3E,0x5A,0x4C,0x22,0xB2,0xA5,0x6A,0xF9,0x30,0xF0,0xC5,0x56,0x36,0x68,0xDE,0xFF,0xDE,0xE7,0xA4,0x2E,0xC5,0xBC,0xC2,0x51,0x64,0x88,0x11,0xD9,0x4D,0xD7,0xDB,0x48,0x88,0x86,0x87,0xC2,0xF8,0x5D,0x1A,0x38,0x05,0x83,0x14,0xF7,0xB4,0x43,0xD8,0x44,0x1E,0xEB,0x26,0xA7,0xAF,0x58,0x52,0x1D,0xD6,0xE1,0xE7,0x4D,0xED,0x86,0x2C,0x1B,0x35,0xC8,0x5B,0x7A,0xC3,0x51,0x23,0x38,0x20,0x3A,0x69,0x52,0xC8,0x8C,0x3D,0x08,0xF4,0xB1,0xB8,0x2D,0x07,0x0E,0x38,0xA0,0xA0,0x5E,0x4F,0xB0,0x2A,0x4C,0xE1,0x2E,0x13,0x2E,0x19,0x5D,0x2D,0xFD,0xA1,0xD8,0xBC,0x76,0xF7,0xAD,0x3A,0xCC,0x5B,0xF4,0xB6,0x1E,0xFF,0x11,0x59,0xE7,0xAB,0x1D,0xCA,0xC0,0x33,0xE2,0xF5,0x78,0xCB,0x34,0x0B,0x8D,0x16,0x17,0xFB,0xB0,0xF9,0x39,0x2C,0xE1,0xA9,0x33,0xEA,0x74,0xBB,0x45,0xC0,0x6D,0x3C,0x8A,0x90,0x69,0xBB,0x0D,0x38,0x4C,0x17,0x8E,0x48,0xF4,0x43,0x4C,0x89,0xC7,0x55,0x45,0x3D,0xCF,0xAB,0x85,0xFD,0x37,0x9C,0x90,0xA7,0xB2,0x7C,0xEC,0xEC,0x27,0xFE,0xA3,0xD3,0x19,0x84,0xDE,0x94,0x39,0x29,0x08,0x22,0xF0,0x59,0x1D,0x97,0x6B,0xA7,0x16,0xB5,0x73,0x12,0x5A,0xEA,0x7C,0x17,0x25,0x8B,0x1D,0x60,0x43,0xBC,0x81,0x4A,0xFA,0x8A,0xDB,0x66,0xD6,0xB5,0x69,0xC1,0x71,0xCF,0xAF,0x63,0x58,0xB8,0xD8,0x08,0xAE,0x72,0xE0,0x38,0x1E,0x0A,0x7C,0x3F,0x4C,0x6F,0xF7,0x87,0xC0,0xCB,0xC7,0x64,0x3C,0xD4,0x3C,0xF3,0x2F,0x65,0x70,0xD3,0xF4,0xD6,0x54,0x7B,0x53,0xCF,0xED,0x6C,0x68,0x91,0x51,0x7D,0x27,0xC1,0xC9,0xB6,0x98,0x8F,0x5B,0xA9,0xF2,0x21,0xBB,0xB8,0x34,0xF9,0x15,0xCE,0x26,0xD8,0x4F,0xED,0x3F,0xAB,0x82,0x8E,0x79,0x36,0xE5,0x79,0xAC,0xD5,0x87,0x09,0xCF,0x52,0x35,0x8B,0x66,0x23,0x0D,0x78,0x4F,0xA9,0xA1,0x8D,0xAD,0xE7,0x6E,0xB4,0x6E,0x45,0xFD,0x51,0x6C,0x40,0x0D,0x35,0xC3,0x9C,0xE2,0xC6,0xC8,0x2F,0x7A,0x69,0x92,0xCB,0x2A,0x95,0x06,0x59,0x64,0x11,0xC3,0xBA,0x55,0xD0,0x68,0x81,0x94,0x56,0x77,0x28,0x14,0x75,0x1B,0x73,0x2E,0xD9,0x16,0xF4,0x74,0x8F,0x96,0x32,0x90,0xB4,0x67,0xE2,0x25,0x61,0xD6,0xBF,0x3C,0xF4,0xD2,0x06,0xCD,0x27,0x96,0x47,0x96,0xB4,0xCA,0x96,0x91,0xEF,0x25,0xD6,0xBA,0x14,0xFE,0xD8,0xE7,0xB1,0xF2,0x57,0x5B,0x26,0xBD,0x65,0x16,0xBE,0xF1,0xFA,0xA2,0xEA,0x26,0x51,0x71,0xF4,0xE4,0x3D,0x66,0x2B,0x30,0xA6,0x25,0x79,0xA0,0x87,0x56,0x6E,0x90,0x13,0xEE,0xB4,0xFF,0xF8,0x5A,0x04,0x06,0xAB,0x63,0x66,0xDF,0xBC,0x8F,0x42,0xAD,0xE0,0xC9,0xB8,0x74,0xF0,0x60,0x38,0x4B,0xFD,0x9C,0xF7,0x70,0x7D,0xAC,0xFF,0x3C,0x20,0xDB,0x21,0xDD,0xC8,0xC7,0x0C,0x77,0xD6,0x10,0x91,0xFF,0xDA,0x30,0xF2,0x45,0x4A,0x5C,0x63,0xEE,0xFE,0x24,0x86,0x1A,0x4E,0x5F,0x4B,0x5C,0x3E,0xD1,0xF2,0x84,0x31,0xB5,0x3A,0x82,0x30,0x85,0xAC,0x32,0xFE,0x0D,0x67,0x56,0x38,0x82,0x62,0x18,0x78,0x1B,0x61,0xFD,0x94,0x9F,0xD6,0x7B,0x0E,0x3D,0xF7,0x17,0x51,0x03,0x13,0xEF,0xEC,0xFA,0xFC,0x39,0x74,0x53,0x35,0x08,0x4C,0xA6,0xFD,0x15,0x3E,0x6C,0xF1,0x1D,0xB2,0xB9,0xE0,0x38,0xF2,0xCB,0xF6,0xB5,0xC5,0xC2,0xDF,0xAD,0xC5,0xA7,0x15,0x37,0xEB,0x26,0xFB,0xBB,0x70,0x26,0xC6,0x8C,0x82,0x37,0x58,0xE4,0xCB,0xF0,0xB3,0x2F,0x61,0x87,0xFE,0xD7,0x7F,0xD4,0xCF,0x55,0x49,0x9D,0x33,0x6C,0x81,0x62,0xA0,0xB5,0x48,0x9C,0xDC,0xCC,0x1F,0xAE,0xC4,0x6B,0x5C,0x93,0x92,0xFA,0x92,0xF8,0x3F,0xBA,0x1E,0xD3,0x4A,0x86,0xAA,0xF2,0xDD,0x56,0xD1,0xC9,0xB2,0x3F,0x50,0x88,0x85,0x08,0xDB,0x77,0x0A,0x89,0xCF,0xD7,0x19,0x95,0x88,0x0A,0xE8,0x20,0x53,0x93,0xEB,0x86,0x64,0x77,0xF0,0x11,0x97,0x47,0x5F,0x37,0xA4,0x96,0xFE,0x75,0x51,0x72,0xED,0x4A,0x0B,0x9B,0x94,0x3F,0xF0,0x3C,0x7C,0x8A,0x8F,0xDE,0x5E,0x67,0xBD,0x54,0x75,0x77,0xE2,0x08,0xF3,0x40,0x55,0xA1,0xBE,0x14,0x83,0xFC,0x0A,0xAF,0xCD,0x2F,0xEE,0xFB,0xC5,0xC7,0x04,0xA0,0x05,0x34,0x63,0x93,0x99,0x20,0x22,0x2B,0x27,0x4F,0x83,0x77,0x85,0x08,0x33,0x10]

def decrypt(body,len,magicByte):
	v3=0
	v7=len>>2
	if(v7):
		while 1:
			body[4*v3+0]^=lookUpTable[(4*(v3+magicByte))%1024+0]
			body[4*v3+1]^=lookUpTable[(4*(v3+magicByte))%1024+1]
			body[4*v3+2]^=lookUpTable[(4*(v3+magicByte))%1024+2]
			body[4*v3+3]^=lookUpTable[(4*(v3+magicByte))%1024+3]
			v3+=1
			if v3>=v7:
				break
	return body

def getMagic(header):
	n=12
	v2=0
	v3=4
	while 1:
		v4=header[n]
		n+=1
		v2=v4|(v2<<8)
		v3-=1
		if not v3:
			break
	return v2

def deSerialize(serializedFile,outfile):
	n=28
	length=len(serializedFile)
	counter=0
	nameTable=[]
	totalEntries=0
	for m in range(0,7):
		totalEntries+=int.from_bytes(serializedFile[(4*m):4*(m+1)], byteorder='big')
	if VERBOSE:
		print(totalEntries)
	while counter<totalEntries:
		bytesNew=bytearray()
		while serializedFile[n]!=0x00:
			bytesNew.append(serializedFile[n])
			n+=1
		counter+=1
		n+=1
		nameTable.append(str(bytesNew,encoding='utf-8'))
	if VERBOSE:
		print(nameTable)
		print(n)
		print(counter)
	while n<length:
		if isNameRef(serializedFile[n]):
			outfile.write(' '+nameTable[nameRefToIndex(serializedFile,n)])
			n+=2
		else:
			outfile.write(translateOp(serializedFile[n]))
			n+=1

def isNameRef(byte):
	return byte>>7

def nameRefToIndex(serializedFile,n):
	if serializedFile[n]==0x80:
		return serializedFile[n+1]-0x80
	else:
		return serializedFile[n+1]+serializedFile[n]-0x81+128

def translateOp(operatorByte):
	if operatorByte in knownOperators:
		return knownOperators[operatorByte]
	print('Unrecognized operator {:d}'.format(operatorByte))
	return 'UO{:d}'.format(operatorByte)

if __name__ == '__main__':
	parser=argparse.ArgumentParser(description='Convert MATLAB .p file to .m file')
	parser.add_argument('infilename', metavar='infilename',help='input file name')
	parser.add_argument('outfilename', metavar='outfilename',nargs='?',help='output file name')
	parser.add_argument('--inplace','-m',action='store_true',help='output file name set to original filename-\'.p\'+\'.m\'')
	parser.add_argument('--ser', metavar='ser',nargs='?',help='decrypted serialized file output, for debugging')
	parser.add_argument('--verbose','-v',action='store_true',help='verbose')
	parser.add_argument('--fmt','-f',action='store_true',help='call matlab_formatter (by affenwiesel, https://github.com/affenwiesel/matlab-formatter-vscode) to clean the output,don\'t use if line number accurate output is required.')
	args = parser.parse_args()
	if not args.outfilename:
		if args.inplace:
			splitpath=os.path.splitext(args.infilename)
			outfilename=splitpath[0]+'.m'
		else:
			outfilename=args.infilename+'.m'
	else:
		outfilename=args.outfilename
	if args.fmt:
		import tempfile
		realOutFileName=outfilename
		outfilename=tempfile.mktemp()
	VERBOSE=args.verbose
	with open(args.infilename,'rb') as infile:
		with open(outfilename,'w') as outfile:
			serializedFile=getSerializedFile(infile)
			if args.ser:
				serfileHdl=open(args.ser,'wb')
				serfileHdl.write(serializedFile)
				serfileHdl.close()
			deSerialize(serializedFile,outfile)
	if args.fmt:
		import matlab_formatter,sys
		sys.stdout = open(realOutFileName, 'w')
		formatter=matlab_formatter.Formatter(4)#indent = 4
		formatter.formatFile(outfilename,1,None)
